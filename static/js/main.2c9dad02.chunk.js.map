{"version":3,"sources":["features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Buttons/ExampleTaskButton/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/queryParameteres.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","styled.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","GlobalStyle.js","index.js","theme.js"],"names":["Wrapper","styled","form","theme","breakpoint","mobileMax","Button","button","colors","teal","white","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","loading","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectLoadingExampleTasks","input","alto","Form","inputRef","useRef","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","Input","ref","value","placeholder","onChange","target","onClick","current","focus","activeClassName","List","ul","Item","li","hidden","css","Content","span","toggleDone","emerald","remove","cardinal","StyledLink","Link","attrs","TaskList","location","useLocation","query","URLSearchParams","search","get","searchQueryParamName","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","to","Container","div","silver","Buttons","length","disabled","every","Segment","section","Header","header","Title","h2","SectionBody","Section","title","body","extraHeaderContent","Main","main","children","ExampleTaskButton","key","useQueryParameter","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","pathname","toString","useReplaceQueryParameter","TasksPage","Search","TaskPage","useParams","find","getTaskById","class","rel","href","ListItem","StyledNavLink","NavLink","path","AuthorPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","taskReducer","middleware","run","GlobalStyle","createGlobalStyle","gallery","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.2c9dad02.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\n\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.colors.teal};\r\n    color: ${({ theme }) => theme.colors.white};\r\n    padding: 10px;\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(105%);\r\n        transform: scale(1.2);\r\n\r\n            @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n                transform: none;\r\n             }\r\n    };\r\n\r\n    &:active {\r\n        filter: brightness(110%);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: state => {\r\n            for (const task of state.tasks) {\r\n                task.done = true;\r\n            };\r\n        },\r\n        fetchExampleTasks: (state) => {\r\n            state.loading = true;\r\n        },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectLoadingExampleTasks = state => selectTasksState(state).loading;\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state)\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    };\r\n\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\n\r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.colors.alto};\r\n`;","import { useState, useRef } from 'react';\r\nimport { Wrapper, Button } from \"./styled\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTask } from '../../tasksSlice';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport Input from '../Input';\r\n\r\nconst Form = () => {\r\n\r\n    const inputRef = useRef(null);\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (trimmedNewTaskContent === \"\") {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    const onChange = ({ target }) => setNewTaskContent(target.value);\r\n\r\n    return (\r\n        <Wrapper\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={onChange}\r\n            />\r\n            <Button\r\n                onClick={focusInput}\r\n            >\r\n                Dodaj zadanie\r\n            </Button>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Form;","import { Link } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const List = styled.ul`\r\n   padding: 0;\r\n   list-style: none;\r\n   margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.alto};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n     display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n   ${({ done }) => done && css`\r\n     text-decoration: line-through;\r\n   `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.colors.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n       background-color: ${({ theme }) => theme.colors.emerald};\r\n\r\n       &:hover {\r\n        filter: brightness(110%);  \r\n       }\r\n\r\n       &:active {\r\n         filter: brightness(120%);\r\n       }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.cardinal};\r\n\r\n        &:hover {\r\n         filter: brightness(110%);   \r\n       }\r\n\r\n       &:active {\r\n         filter: brightness(120%);\r\n       }\r\n    `}\r\n`;\r\n\r\nexport const StyledLink = styled(Link).attrs(() => ({\r\n  activeClassName,\r\n}))`\r\n  &.${activeClassName} {\r\n\r\n  }\r\n    color: ${({ theme }) => theme.colors.teal};\r\n    text-decoration: none;\r\n`;","export default \"szukaj\";","import { List, Item, Content, Button, StyledLink } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\n\r\nconst TaskList = () => {\r\n    const location = useLocation();\r\n    const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <StyledLink to={`/zadania/${task.id}`}>{task.content}</StyledLink>\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default TaskList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background: transparent;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n    font-size: 15px;\r\n    color: ${({ theme }) => theme.colors.teal};\r\n\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            flex-basis: 100%;\r\n            margin: 10px;\r\n        }\r\n\r\n        &:hover {\r\n            filter: brightness(105%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.colors.silver};\r\n        }\r\n`;","import { Container, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone, selectHideDone } from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Container>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                        disabled={tasks.every(({ done }) => !done)}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}>\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Segment = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.colors.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.colors.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.alto};\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            grid-template-columns: 1fr;\r\n        }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n    padding: 20px;\r\n\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            padding-bottom: 0;\r\n        }\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n     padding: 20px;\r\n`;","import {Segment, Header, Title, SectionBody} from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Segment>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      <div>\r\n        {extraHeaderContent}\r\n      </div>\r\n    </Header>\r\n    <SectionBody>\r\n      {body}\r\n    </SectionBody>\r\n  </Segment>\r\n);\r\n\r\nexport default Section;","const Header = ({title}) => (\r\n<header>\r\n        <h1>{title}</h1>\r\n      </header>\r\n)\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n`;","import { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import { Button } from \"../styled\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchExampleTasks, selectLoadingExampleTasks } from \"../../../tasksSlice\";\r\n\r\nconst ExampleTaskButton = () => {\r\n\r\n    const loading = useSelector(selectLoadingExampleTasks);\r\n    const dispatch = useDispatch();\r\n   \r\n    return (\r\n        <Button \r\n            onClick={() => dispatch(fetchExampleTasks())}\r\n            disabled={loading}\r\n        >\r\n            {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadanie\"}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default ExampleTaskButton;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import Input from \"../Input\"\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameteres\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport default () => {\r\n\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    )\r\n}","import { useHistory, useLocation } from \"react-router-dom\"\r\n\r\nexport const useQueryParameter = (key) => {\r\n    const location = useLocation();\r\n\r\n    return(new URLSearchParams(location.search)).get(key)\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({key, value}) => {\r\n\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n    \r\n        history.push(`${location.pathname}?${searchParams.toString()}`) \r\n    };\r\n}","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport ExampleTaskButton from \"./Buttons/ExampleTaskButton\";\nimport Search from \"./Search\";\n\nfunction TasksPage() {\n\n  return (\n    <>\n      <Container>\n        <Header title=\"Lista zadań\" />\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form />}\n          extraHeaderContent={<ExampleTaskButton />}\n        />\n        <Section\n          title=\"Wyszukiwarka\"\n          body={<Search />}\n        />\n        <Section\n          title=\"Lista zadań\"\n          body={<TaskList />}\n          extraHeaderContent={<Buttons />}\n        />\n      </Container>\n    </>\n  );\n};\n\n\nexport default TasksPage;\n","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Header title=\"Szczegóły zadania\" />\r\n                <Section\r\n                    title={task ? task.content : \"Nie znaleziono zadania 😢\"}\r\n                    body={<>\r\n                    <strong>Ukończone:</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n                    </>}\r\n                />\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default TaskPage;\r\n","import Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nexport default () => (\r\n    <Container>\r\n        <Header title=\"O autorze\" />\r\n        <Section\r\n            title=\"Eugeniusz Savelyev\"\r\n            body={\r\n                <>\r\n                    <p>Nazywam sie Eugeniusz. Pochodzę z Białorusi, ale już kilka lat mieszkam w Polsce, obecnie w\r\n                        Warszawie. Główną moją pasją jest fotografia, zajmuję ją już 10 lat. Jeśli jesteś zainteresowany, możesz <a class=\"main__outerLink\"\r\n                            rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://instagram.com/eugen.save\"\r\n                            title=\"Moje portfolio na instagramie\">zobaczyć\r\n                            zdjęcia które robię w profilu na Instagramie</a>\r\n                    </p>\r\n                    <p>\r\n                        Poza fotografią pracuję w korporacji w zespole zakupów przy departamencie IT. \r\n                        Zajmuję się kupnem sprzętu komputerowego, serwerów i licencji na potrzeby firmy.\r\n                        Można powiedzieć że technologię są moją drugą pasją, lubię śledzić nowości technologiczne i to jak rozwija się świat. 🛰\r\n                        W sumie to wszystko stało powodem że zacząłem naukę programowania, bo chcę stać częścią światu IT i móc tworzyć coś fajnego 😎\r\n                    </p>\r\n                    <p>\r\n                        Wolny czas spędzam z swoją córką i żoną, uważam że rodzina jest najważnejszym spędzeniem czasu w życiu człowieka 🥰 \r\n                    </p>\r\n                    </>}\r\n        />\r\n    </Container>\r\n)","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const List = styled.ul`\r\n    display: grid;\r\n    justify-content: center;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    background-color: ${({ theme }) => theme.colors.teal};\r\n    padding: 20px;\r\n    margin: 0px;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    list-style-type: none;\r\n    font-size: 18px;\r\n`;\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    &.${activeClassName} {\r\n        font-weight: bold;\r\n    }\r\n\r\n    color: ${({ theme }) => theme.colors.white};\r\n    text-decoration: none;\r\n    \r\n`;\r\n\r\n","import TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\"\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { StyledNavLink, ListItem, List } from \"./styled\";\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <nav>\r\n            <List>\r\n                <ListItem>\r\n                    <StyledNavLink to=\"/zadania\">\r\n                        Zadania\r\n                    </StyledNavLink>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <StyledNavLink to=\"/autor\">\r\n                        O autorze\r\n                    </StyledNavLink>\r\n                </ListItem>\r\n            </List>\r\n            <Switch>\r\n                <Route path=\"/zadania/:id\">\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path=\"/zadania\">\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path=\"/autor\">\r\n                    <AuthorPage />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Redirect to=\"/zadania\" />\r\n                </Route>\r\n            </Switch>\r\n        </nav>\r\n    </HashRouter>\r\n);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\nconst response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\nif (!response.ok) {\r\n    new Error (response.statusText);\r\n};\r\n\r\nreturn await response.json();\r\n}; ","import { takeEvery, call, put, select, takeLatest, delay } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, selectTasks, setTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000)\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks))\r\n    } catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler)\r\n}","import { all } from \"redux-saga/effects\"\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\"\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import {configureStore} from '@reduxjs/toolkit';\r\nimport taskReducer from \"./features/tasks/tasksSlice\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: taskReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: 'Montserrat', sans-serif;\r\n  background: ${({ theme }) => theme.colors.gallery};\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from './GlobalStyle';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        white: \"#fff\",\r\n        emerald: \"#50c878\",\r\n        cardinal: \"#C41E3A\",\r\n        alto: \"#ddd\",\r\n        teal: \"#008080\",\r\n        silver: \"#ccc\",\r\n        gallery: \"#gallery\"\r\n    },\r\n\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n}"],"sourceRoot":""}