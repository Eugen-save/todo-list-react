{"version":3,"sources":["features/tasks/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/index.js","features/tasks/Buttons/ExampleTaskButton/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","GlobalStyle.js","index.js","theme.js"],"names":["Wrapper","styled","form","theme","breakpoint","mobileMax","Input","input","colors","alto","Button","button","teal","white","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskID","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setTasks","actions","selectTasks","Form","inputRef","useRef","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","ref","value","placeholder","onChange","target","onClick","current","focus","List","ul","Item","li","hidden","css","Content","span","toggleDone","emerald","remove","cardinal","TaskList","useSelector","map","Container","div","silver","Buttons","length","disabled","every","Segment","section","Header","header","Title","h2","SectionBody","Section","title","body","extraHeaderContent","children","ExampleTaskButton","Tasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","call","exampleTasks","put","alert","select","takeEvery","type","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","taskReducer","middleware","run","GlobalStyle","createGlobalStyle","gallery","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.b91c414c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.colors.alto};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.colors.teal};\r\n    color: ${({ theme }) => theme.colors.white};\r\n    padding: 10px;\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(105%);\r\n        transform: scale(1.2);\r\n\r\n            @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n                transform: none;\r\n             }\r\n    };\r\n\r\n    &:active {\r\n        filter: brightness(110%);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskID);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskID);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: state => {\r\n            for (const task of state.tasks) {\r\n                task.done = true;\r\n            };\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;\r\n","import { useState, useRef } from 'react';\r\nimport { Wrapper, Input, Button } from \"./styled\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTask } from '../tasksSlice';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\n\r\nconst Form = () => {\r\n\r\n    const inputRef = useRef(null);\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (trimmedNewTaskContent === \"\") {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    const onChange = ({ target }) => setNewTaskContent(target.value);\r\n\r\n    return (\r\n        <Wrapper\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={onChange}\r\n            />\r\n            <Button\r\n                onClick={focusInput}\r\n            >\r\n                Dodaj zadanie\r\n            </Button>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n   padding: 0;\r\n   list-style: none;\r\n   margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n     display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n   ${({ done }) => done && css`\r\n     text-decoration: line-through;\r\n   `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.colors.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n       background-color: ${({ theme }) => theme.colors.emerald};\r\n\r\n       &:hover {\r\n        filter: brightness(110%);  \r\n       }\r\n\r\n       &:active {\r\n         filter: brightness(120%);\r\n       }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({theme}) => theme.colors.cardinal};\r\n\r\n        &:hover {\r\n         filter: brightness(110%);   \r\n       }\r\n\r\n       &:active {\r\n         filter: brightness(120%);\r\n       }\r\n    `}\r\n\r\n\r\n`;","import { List, Item, Content, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default TaskList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background: transparent;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n    font-size: 15px;\r\n    color: ${({ theme }) => theme.colors.teal};\r\n\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            flex-basis: 100%;\r\n            margin: 10px;\r\n        }\r\n\r\n        &:hover {\r\n            filter: brightness(105%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.colors.silver};\r\n        }\r\n`;","import { Container, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Container>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                        disabled={tasks.every(({ done }) => !done)}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}>\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Segment = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.colors.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.colors.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.alto};\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            grid-template-columns: 1fr;\r\n        }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n    padding: 20px;\r\n\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            padding-bottom: 0;\r\n        }\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n     padding: 20px;\r\n`;","import {Segment, Header, Title, SectionBody} from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Segment>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      <div>\r\n        {extraHeaderContent}\r\n      </div>\r\n    </Header>\r\n    <SectionBody>\r\n      {body}\r\n    </SectionBody>\r\n  </Segment>\r\n);\r\n\r\nexport default Section;","const Header = ({title}) => (\r\n<header>\r\n        <h1>{title}</h1>\r\n      </header>\r\n)\r\n\r\nexport default Header;","const Container = ({ children }) => (\r\n    <main>\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import { Button } from \"../styled\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchExampleTasks } from \"../../tasksSlice\";\r\n\r\nconst ExampleTaskButton = () => {\r\n\r\n    const dispatch = useDispatch();\r\n   \r\n    return (\r\n        <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n            Pobierz przykładowe zadanie\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default ExampleTaskButton;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\nimport ExampleTaskButton from \"./Buttons/ExampleTaskButton\"\n\nfunction Tasks() {\n\n  return (\n    <>\n      <Container>\n        <Header title=\"Lista zadań\" />\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form />}\n          extraHeaderContent={<ExampleTaskButton />}\n        />\n        <Section\n          title=\"Lista zadań\"\n          body={<TaskList />}\n          extraHeaderContent={<Buttons />}\n        />\n      </Container>\n    </>\n  );\n};\n\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\nconst response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\nif (!response.ok) {\r\n    new Error (response.statusText);\r\n};\r\n\r\nreturn await response.json();\r\n}; ","import { takeEvery, call, put, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, selectTasks, setTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks))\r\n    } catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeEvery(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler)\r\n}","import { all } from \"redux-saga/effects\"\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\"\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import {configureStore} from '@reduxjs/toolkit';\r\nimport taskReducer from \"./features/tasks/tasksSlice\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: taskReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: 'Montserrat', sans-serif;\r\n  background: ${({theme}) => theme.colors.gallery};\r\n  max-width: 900px;\r\n  padding: 20px;\r\n  margin: 0 auto;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from './GlobalStyle';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        white: \"#fff\",\r\n        emerald: \"#50c878\",\r\n        cardinal: \"#C41E3A\",\r\n        alto: \"#ddd\",\r\n        teal: \"#008080\",\r\n        silver: \"#ccc\",\r\n        gallery: \"#gallery\"\r\n    },\r\n\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n}"],"sourceRoot":""}