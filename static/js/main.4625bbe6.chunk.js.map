{"version":3,"sources":["features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","styled.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["Wrapper","styled","form","Input","input","Button","button","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","removeTask","splice","setAllDone","actions","selectTasks","Form","inputRef","useRef","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","ref","value","placeholder","onChange","target","onClick","current","focus","List","ul","Item","li","hidden","css","Content","span","toggleDone","remove","TaskList","useSelector","map","task","Container","div","Buttons","length","disabled","every","Segment","section","Header","header","Title","h2","SectionBody","Section","title","body","extraHeaderContent","Main","main","children","GlobalStyle","createGlobalStyle","Tasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","taskReducer","ReactDOM","render","StrictMode","store","App","document","getElementById"],"mappings":"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","file":"static/js/main.4625bbe6.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n@media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n}\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: teal;\r\n    color: white;\r\n    padding: 10px;\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n&:hover {\r\n    background-color: hsl(180, 100%, 35%);\r\n    transform: scale(1.2);\r\n}\r\n\r\n&:active {\r\n    background-color: hsl(180, 100%, 40%);\r\n}\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({id}) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({id}) => id === payload);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: state => {\r\n            for (const task of state.tasks) {\r\n                task.done = true;\r\n            };\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;\r\n","import { useState, useRef } from 'react';\r\nimport { Wrapper, Input, Button } from \"./styled\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTask } from '../tasksSlice';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\n\r\nconst Form = () => {\r\n\r\n    const inputRef = useRef(null);\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (trimmedNewTaskContent === \"\") {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done: false,\r\n            id: nanoid,\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    const onChange = ({ target }) => setNewTaskContent(target.value);\r\n\r\n    return (\r\n        <Wrapper\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={onChange}\r\n            />\r\n            <Button\r\n                onClick={focusInput}\r\n            >\r\n                Dodaj zadanie\r\n            </Button>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n   padding: 0;\r\n   list-style: none;\r\n   margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n     display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n   ${({ done }) => done && css`\r\n     text-decoration: line-through;\r\n   `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: white;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n       background-color: green;\r\n\r\n       &:hover {\r\n        background-color: hsl(120, 100%, 35%);  \r\n       }\r\n\r\n       &:active {\r\n        background-color: hsl(120, 100%, 45%);\r\n       }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: red;\r\n\r\n        &:hover {\r\n        background-color: hsl(0, 100%, 60%);  \r\n       }\r\n\r\n       &:active {\r\n        background-color: hsl(0, 100%, 65%);\r\n       }\r\n    `}\r\n\r\n\r\n`;","import { List, Item, Content, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default TaskList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n\r\n@media (max-width: 767px) {\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background: transparent;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n    font-size: 15px;\r\n    color: teal;\r\n\r\n@media (max-width: 767px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n}\r\n\r\n&:hover {\r\n    color: hsl(180, 100%, 30%);\r\n}\r\n\r\n&:active {\r\n    color: hsl(180, 100%, 35%);\r\n}\r\n\r\n&:disabled {\r\n    color: #ccc;\r\n}\r\n`;","import { Container, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Container>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                        disabled={tasks.every(({ done }) => !done)}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}>\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Segment = styled.section`\r\n    margin: 10px 0;\r\n    background: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid #ddd;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 767px) {\r\n        padding-bottom: 0;\r\n    }\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n     padding: 20px;\r\n`;","import {Segment, Header, Title, SectionBody} from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Segment>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      <div>\r\n        {extraHeaderContent}\r\n      </div>\r\n    </Header>\r\n    <SectionBody>\r\n      {body}\r\n    </SectionBody>\r\n  </Segment>\r\n);\r\n\r\nexport default Section;","const Header = ({title}) => (\r\n<header>\r\n        <h1>{title}</h1>\r\n      </header>\r\n)\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import {Main} from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: 'Montserrat', sans-serif;\r\n  background: #eee;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\n`;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\nimport { GlobalStyle } from \"../../styled\";\n\nfunction Tasks() {\n\n  return (\n    <>\n      <GlobalStyle />\n      <Container>\n        <Header title=\"Lista zadań\" />\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form />}\n        />\n        <Section\n          title=\"Lista zadań\"\n          body={\n            <TaskList />}\n          extraHeaderContent={\n            <Buttons />}\n        />\n      </Container>\n    </>\n  );\n};\n\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport taskReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: taskReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}