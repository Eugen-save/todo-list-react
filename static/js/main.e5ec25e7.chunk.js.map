{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","styled.js","App.js","useTasks.js","reportWebVitals.js","index.js"],"names":["Blank","styled","form","Input","input","Button","button","Form","addNewTask","inputRef","useRef","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","ref","value","placeholder","onChange","target","onClick","current","focus","List","ul","Item","li","hidden","css","Content","span","done","toggleDone","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","id","content","Container","div","Buttons","toggleHideDone","setAllDone","length","disabled","every","Segment","section","Header","header","Title","h2","SectionBody","Section","title","body","extraHeaderContent","Main","main","children","GlobalStyle","createGlobalStyle","App","setHideDone","tasksFromLocalStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","useTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5ec25e7.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Blank = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n@media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n}\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: teal;\r\n    color: white;\r\n    padding: 10px;\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n&:hover {\r\n    background-color: hsl(180, 100%, 35%);\r\n    transform: scale(1.2);\r\n}\r\n\r\n&:active {\r\n    background-color: hsl(180, 100%, 40%);\r\n}\r\n`;","import { useState, useRef } from 'react';\r\nimport { Blank, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n\r\n    const inputRef = useRef(null);\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (trimmedNewTaskContent === \"\") {\r\n            return;\r\n        }\r\n\r\n        addNewTask(trimmedNewTaskContent);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    const onChange = ({ target }) => setNewTaskContent(target.value);\r\n\r\n    return (\r\n        <Blank\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={onChange}\r\n            />\r\n            <Button\r\n                onClick={focusInput}\r\n            >\r\n                Dodaj zadanie\r\n            </Button>\r\n        </Blank>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n   padding: 0;\r\n   list-style: none;\r\n   margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n     display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n   ${({ done }) => done && css`\r\n     text-decoration: line-through;\r\n   `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: white;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n       background-color: green;\r\n\r\n       &:hover {\r\n        background-color: hsl(120, 100%, 35%);  \r\n       }\r\n\r\n       &:active {\r\n        background-color: hsl(120, 100%, 45%);\r\n       }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: red;\r\n\r\n        &:hover {\r\n        background-color: hsl(0, 100%, 60%);  \r\n       }\r\n\r\n       &:active {\r\n        background-color: hsl(0, 100%, 65%);\r\n       }\r\n    `}\r\n\r\n\r\n`;","import { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => {\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => toggleTaskDone(task.id)}\r\n                    >\r\n                        {task.done ? \"âœ”\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        onClick={() => removeTask(task.id)}\r\n                        remove\r\n                    >\r\n                        ğŸ—‘\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default Tasks;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n\r\n@media (max-width: 767px) {\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background: transparent;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n    font-size: 15px;\r\n    color: teal;\r\n\r\n@media (max-width: 767px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n}\r\n\r\n&:hover {\r\n    color: hsl(180, 100%, 30%);\r\n}\r\n\r\n&:active {\r\n    color: hsl(180, 100%, 35%);\r\n}\r\n\r\n&:disabled {\r\n    color: #ccc;\r\n}\r\n`;","import { Container, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <Container>\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <Button\r\n                    onClick={toggleHideDone}\r\n                    disabled={tasks.every(({ done }) => !done)}\r\n                >\r\n                    {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n                </Button>\r\n                <Button\r\n                    onClick={setAllDone}\r\n                    disabled={tasks.every(({ done }) => done)}>\r\n                    UkoÅ„cz wszystkie\r\n                </Button>\r\n            </>\r\n        )}\r\n    </Container>\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Segment = styled.section`\r\n    margin: 10px 0;\r\n    background: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid #ddd;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 767px) {\r\n        padding-bottom: 0;\r\n    }\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n     padding: 20px;\r\n`;","import {Segment, Header, Title, SectionBody} from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Segment>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      <div>\r\n        {extraHeaderContent}\r\n      </div>\r\n    </Header>\r\n    <SectionBody>\r\n      {body}\r\n    </SectionBody>\r\n  </Segment>\r\n);\r\n\r\nexport default Section;","const Header = ({title}) => (\r\n<header>\r\n        <h1>{title}</h1>\r\n      </header>\r\n)\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import {Main} from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: 'Montserrat', sans-serif;\r\n  background: #eee;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\n`;","import { useState } from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport {useTasks} from \"./useTasks\";\nimport { GlobalStyle } from \"./styled\";\n\nfunction App() {\n\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone)\n  };\n\nconst {\n  tasks,\n  removeTask,\n  toggleTaskDone,\n  setAllDone,\n  addNewTask\n} = useTasks();\n\n  return (\n    <>\n    <GlobalStyle />\n    <Container>\n      <Header title=\"Lista zadaÅ„\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form\n          addNewTask={addNewTask}\n        />}\n      />\n      <Section\n        title=\"Lista zadaÅ„\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />}\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />}\n      />\n    </Container>\n    </>\n  );\n};\n\n\nexport default App;\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useTasks = () => {\r\n\r\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n    const [tasks, setTasks] = useState(\r\n        tasksFromLocalStorage\r\n          ? JSON.parse(tasksFromLocalStorage)\r\n          : []\r\n    );\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            };\r\n\r\n            return task;\r\n        }));\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}